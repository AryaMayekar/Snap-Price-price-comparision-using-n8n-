{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        588,
        -165
      ],
      "id": "86e5d46c-db9a-4173-b117-b69439110669",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "qowKcem7pNHqHfxY",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "eefd677a-425a-492b-ad2b-fc28b33ba855",
              "leftValue": "={{ $('Product SAGE').item.json.output }}",
              "rightValue": "successfully",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1156,
        -260
      ],
      "id": "620a85c1-a97e-4e1f-811e-a0ba5db3ae19",
      "name": "If"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        1464,
        -40
      ],
      "id": "aa0c2039-a5f0-4128-b61b-155c90676a28",
      "name": "Groq Chat Model1",
      "credentials": {
        "groqApi": {
          "id": "qowKcem7pNHqHfxY",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.message.from.id }}",
        "contextWindowLength": 2
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        708,
        -165
      ],
      "id": "7e7b3838-375a-44b2-a914-5f3e9c58d466",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        2240,
        -340
      ],
      "id": "c9dc2c55-0a3b-4ddc-927f-52a958fde909",
      "name": "Groq Chat Model2",
      "credentials": {
        "groqApi": {
          "id": "qowKcem7pNHqHfxY",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        2280,
        160
      ],
      "id": "1ea1d16f-79a2-417b-8a27-674f34bb8133",
      "name": "Groq Chat Model4",
      "credentials": {
        "groqApi": {
          "id": "qowKcem7pNHqHfxY",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8fb76bec-c7e5-4649-9fd0-39946f0424d2",
              "name": "output",
              "value": "={{ $json.output.extractUrl() }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3164,
        -460
      ],
      "id": "5fbca805-8920-4847-b929-2667b6b08070",
      "name": "url extractor"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        2656,
        160
      ],
      "id": "387338e8-22df-42b7-8a85-6bb5e516fbb4",
      "name": "Groq Chat Model5",
      "credentials": {
        "groqApi": {
          "id": "qowKcem7pNHqHfxY",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "40809437-e918-44a4-93b9-af98dae0eac5",
              "leftValue": "={{ $json.output }}",
              "rightValue": "product is not from Flipkart",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2944,
        -60
      ],
      "id": "49883454-965d-4970-931a-276e11d04475",
      "name": "If1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        2656,
        -340
      ],
      "id": "c92eab50-5a30-4934-b3b2-9b7fbcbed10d",
      "name": "Groq Chat Model6",
      "credentials": {
        "groqApi": {
          "id": "qowKcem7pNHqHfxY",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "40809437-e918-44a4-93b9-af98dae0eac5",
              "leftValue": "={{ $json.output }}",
              "rightValue": "product is not from Amazon",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2944,
        -460
      ],
      "id": "c12854fa-14fb-4fbc-8bd4-8ac460ad7b5f",
      "name": "If2"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        4288,
        -340
      ],
      "id": "3b336648-b2a8-47d4-be9e-a3fda899e4c7",
      "name": "Groq Chat Model7",
      "credentials": {
        "groqApi": {
          "id": "qowKcem7pNHqHfxY",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Receive Message').item.json.message.from.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        4796,
        -260
      ],
      "id": "6bd92004-9cac-4352-a82a-b05603555537",
      "name": "Telegram1",
      "webhookId": "4cb8542a-1c63-4e56-99bb-40040d2a6b6c",
      "credentials": {
        "telegramApi": {
          "id": "AFWbiIkXDcUw63JN",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        4288,
        160
      ],
      "id": "f5e49a56-bc39-4d92-a4ef-333046ba2060",
      "name": "Groq Chat Model8",
      "credentials": {
        "groqApi": {
          "id": "qowKcem7pNHqHfxY",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9dd28f14-a2f8-462f-98c8-56cd374f87d3",
              "name": "output",
              "value": "={{ $json.output.extractUrl() }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3164,
        -60
      ],
      "id": "8835ceba-b2b8-4647-9e3d-3bb3c73b29fd",
      "name": "url extractor1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        3912,
        -340
      ],
      "id": "52245c4e-2db6-4f39-8e75-c8c901bab980",
      "name": "Groq Chat Model9",
      "credentials": {
        "groqApi": {
          "id": "qowKcem7pNHqHfxY",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        3912,
        160
      ],
      "id": "0fdf2c8a-4faa-40ed-b2d6-10940315bd34",
      "name": "Groq Chat Model3",
      "credentials": {
        "groqApi": {
          "id": "qowKcem7pNHqHfxY",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://serpapi.com/search",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "engine",
              "value": "google"
            },
            {
              "name": "q",
              "value": "={{ $json.output }} {{ \"Flipkart\" }}"
            },
            {
              "name": "api_key",
              "value": "c31df864693069fdff86bcb692fdd582b672efe1ca1bcf62290025ddd295e88a"
            },
            {
              "name": "start_page",
              "value": "0"
            },
            {
              "name": "num",
              "value": "3"
            },
            {
              "name": "gl",
              "value": "in"
            },
            {
              "name": "tbm",
              "value": "shop"
            },
            {
              "name": "google_domain",
              "value": "google.co.in"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1752,
        -60
      ],
      "id": "32b42f76-d75b-4ecc-a753-8f24fbd9c814",
      "name": "Serp Node F"
    },
    {
      "parameters": {
        "url": "https://serpapi.com/search",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "engine",
              "value": "google"
            },
            {
              "name": "q",
              "value": "={{ $json.output }} {{ \"Amazon\" }}"
            },
            {
              "name": "api_key",
              "value": "7b5d159fc307f9022a9de1981d236a7bf1fb66ca2a647391d4726201ce1070ca"
            },
            {
              "name": "start_page",
              "value": "0"
            },
            {
              "name": "num",
              "value": "4"
            },
            {
              "name": "google_domain",
              "value": "google.co.in"
            },
            {
              "name": "tbm",
              "value": "shop"
            },
            {
              "name": "gl",
              "value": "in"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1752,
        -460
      ],
      "id": "207f9bb1-b872-44cd-8415-79a93ea11f3f",
      "name": "Serp Node A"
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [
        120,
        -260
      ],
      "id": "6dff5fc8-8110-49a9-b603-087c3d7fc713",
      "name": "Receive Message",
      "webhookId": "3970f6ba-33fd-44e4-8d0d-968383f37d37",
      "credentials": {
        "telegramApi": {
          "id": "AFWbiIkXDcUw63JN",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        340,
        -260
      ],
      "id": "dd857e8e-79b4-43fc-9f76-2ba159c2c936",
      "name": "Loop Over Product",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "chatId": "={{ $('Receive Message').item.json.message.chat.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        936,
        -385
      ],
      "id": "d3963f23-d253-4542-8919-d043e13afbc4",
      "name": "Send Message",
      "webhookId": "e58d99cc-92e3-4112-8a38-eedd529d6ba7",
      "credentials": {
        "telegramApi": {
          "id": "AFWbiIkXDcUw63JN",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a195f2be-c141-445e-8526-5a7f03cc0a51",
              "name": "shopping_results",
              "value": "={{ $json.shopping_results }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1972,
        -460
      ],
      "id": "a7d7ea75-1f62-4781-979b-ff8514ff0ebf",
      "name": "JSon to String"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f7f73bc9-cdc2-4254-a804-a4973101b730",
              "name": "shopping_results",
              "value": "={{ $json.shopping_results }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1960,
        -60
      ],
      "id": "99a0aaaf-9c92-437f-9326-3dbeda7056b8",
      "name": "JSon to String1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "33b5ea01-4116-4039-97e6-1aeff4dec88e",
              "name": "highest_price",
              "value": "={{ $json.highest_price }}",
              "type": "string"
            },
            {
              "id": "67528c75-9671-4636-ac17-f6eb2dbee835",
              "name": "keepa_url",
              "value": "={{ $json.keepa_url }}",
              "type": "string"
            },
            {
              "id": "e88ede62-1703-4581-a60f-84e43ae9b5df",
              "name": "lowest_price",
              "value": "={{ $json.lowest_price }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3604,
        -460
      ],
      "id": "00458782-7038-43dc-8d42-fcbcf776c44c",
      "name": "JSon to String2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "33b5ea01-4116-4039-97e6-1aeff4dec88e",
              "name": "highest_price",
              "value": "={{ $json.highest_price }}",
              "type": "string"
            },
            {
              "id": "e88ede62-1703-4581-a60f-84e43ae9b5df",
              "name": "lowest_price",
              "value": "={{ $json.lowest_price }}",
              "type": "string"
            },
            {
              "id": "a15dc5e7-fd4a-4aa7-9516-0aa1787d50e8",
              "name": "flipshope_url",
              "value": "={{ $json.flipshope_url }}",
              "type": "string"
            },
            {
              "id": "97feff92-56f7-4eae-98ba-f89dc3690127",
              "name": "average_price",
              "value": "={{ $json.average_price }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3604,
        -60
      ],
      "id": "12fd4b51-f80b-4558-97a7-da549c589695",
      "name": "JSon to String3"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://0f57-103-172-87-178.ngrok-free.app/scrape",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"amazon_url\" : \"{{ $json.output }}\"\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3400,
        -460
      ],
      "id": "0c5e499c-ed05-4d5f-af3f-eefd0600b596",
      "name": "Product Extraction A"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://0f57-103-172-87-178.ngrok-free.app/scrapeFlipkart",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"flipkart_url\" : \"{{ $json.output }}\"\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3380,
        -60
      ],
      "id": "dca7d290-cc9a-486b-847b-f9182a37d2f7",
      "name": "Product Extraction F",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Receive Message').item.json.message.text }}",
        "options": {
          "systemMessage": "# Role\nYou are a product inquiry assistant which works for a price comparison website. Your role is ask the user minimum two brief and relevant questions to understand their specific preferences or requirements for a given product.\n\n# Instructions\nFollow the following steps while asking questions to the user:\n1. Receive Product Input: When the user provides a product name, determine its category.\n2. Clarify Ambiguity (1st Question): If the product could refer to multiple items, ask for \n   clarification. (e.g., \"Are you looking for a Samsung S25 phone or its case?\")\n3. Feature-Based Question (2nd Question): Ask about a key product variation or specification. (e.g., \n   \"Are you looking for the 256GB or 512GB variant?\" for a phone.)\n4. Do not ask more than 3 questions to the user.\n\n# Rules\n- While asking question to the user, ask only the question no need to add any other text or details along with it.\n- Do not ask more than 3 questions to the user.\n- Stay Relevant: Only ask questions related to the product provided by the user.\n- Avoid Redundancy: Do not repeat questions or ask for unnecessary details.\n- No Budget Queries: Since the user has already mentioned a specific product, avoid budget-related \n  questions.\n- Neutral & Helpful Tone: Maintain a polite and neutral tone while asking questions.\n- Don't make things up, ask the user clarifying questions if you need additional information to \n  complete your task. If you're asked a question to which you don't know the answer, say so.\n- make the use of the word 'shortly' only while notifying the user that you have successfully understood their product(i.e. after asking 2 minimum questions).\n\n# Examples\nUse the following examples when notifying the user that you have successfully understood their product:\n\n<example>\nI have successfully understood that you are looking for Product-named : Samsung S25 phone.\nNow I will shortly provide you all the details related to Samsung S25 phone.\n</example>\n\n<example>\nI have successfully understood that you are looking for the Product-named : BOAT Lunar Discovery watch.\nNow I will shortly provide you all the details related to BOAT Lunar Discovery watch.\n</example>"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        560,
        -385
      ],
      "id": "dedf2b4b-aae1-4faa-96e3-9aded2ac1d2c",
      "name": "Product SAGE",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "chatId": "={{ $('Receive Message').item.json.message.from.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        4640,
        -20
      ],
      "id": "d9217ada-6bef-4638-980f-b8b05ea6f276",
      "name": "Telegram",
      "webhookId": "4cb8542a-1c63-4e56-99bb-40040d2a6b6c",
      "credentials": {
        "telegramApi": {
          "id": "AFWbiIkXDcUw63JN",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('AmazonFetch').item.json.output }}\n{{ $json.output }}",
        "options": {
          "systemMessage": "#Role\n\nYou are an AI-powered Message Optimizer, responsible for analyzing input text and making necessary changes to ensure it can be sent to Telegram without errors. \n\n#Instructions\nUse the following steps to execute your task:\n\n1. Analyze Input Text: Read the input message and identify any potential issues that could cause errors in Telegram.\n2. Escape Special Characters: If the message is in MarkdownV2, escape _ * [ ] ( ) ~ > # + - = { } . ! to prevent formatting errors.\n3. Fix Formatting Issues: Ensure proper MarkdownV2 or HTML formatting for bold, italics, links, and bullet points.\n4. Split Long Messages: If the message exceeds 4096 characters, break it into multiple parts while maintaining readability.\n5. Preserve Links & Product Details: Ensure that URLs remain clickable and essential product details (such as price, rating, and availability) are not altered.\n6. Remove Unwanted Characters: Strip out unnecessary symbols like *, -, =, and ** if they are not part of formatting.\n\n#Rules\n\n- If the message contains MarkdownV2 special characters, escape them properly.\n- Ensure that product links, names, and prices remain unchanged.\n- Maintain proper Telegram-supported formatting without adding unnecessary text.\n- Do not write any extra text(e.g. \"I removed unwanted characters, added proper formatting, and split the message into multiple parts to ensure it fits within Telegram's character limit. The link remains clickable, and essential product details are preserved\" or \"I ensured proper Telegram-supported formatting, escaped special characters, and preserved the link, product details, and essential information. The message should be sendable to Telegram without errors or formatting issues.\" or \"Here is the optimized message:\").\n\n#Examples\nUse the following example while sending the data to telegram:\n<example>\nAmazon Product Information\n\nSamsung Galaxy S25 5G (12GB RAM + 256GB Storage) Blue\n + Link: https://www.amazon.in/Samsung-Galaxy-12GB-256GB-Storage/dp/B0DVC7C81C\n + Price: ₹63,697.00\n + Source: Amazon.in\n + Delivery: Free delivery\n\nLowest and Highest price on Amazon  \n- Lowest Price: ₹500 on 20-02-2025  \n- Highest Price: ₹700 on 24-03-2025\nFor more price details information refer the below link  \nhttps://example.com/price-history\n\n</example>"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        4200,
        -560
      ],
      "id": "1f0b95d3-e371-4a0c-86f2-1fe4dc8bab30",
      "name": "Telefix A"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('FlipkartFetch').item.json.output }}\n{{ $json.output }}",
        "options": {
          "systemMessage": "#Role\n\nYou are an AI-powered Message Optimizer, responsible for analyzing input text and making necessary changes to ensure it can be sent to Telegram without errors. \n\n#Instructions\nUse the following steps to execute your task:\n\n1. Analyze Input Text: Read the input message and identify any potential issues that could cause errors in Telegram.\n2. Escape Special Characters: If the message is in MarkdownV2, escape _ * [ ] ( ) ~ > # + - = { } . ! to prevent formatting errors.\n3. Fix Formatting Issues: Ensure proper MarkdownV2 or HTML formatting for bold, italics, links, and bullet points.\n4. Split Long Messages: If the message exceeds 4096 characters, break it into multiple parts while maintaining readability.\n5. Preserve Links & Product Details: Ensure that URLs remain clickable and essential product details (such as price, rating, and availability) are not altered.\n6. Remove Unwanted Characters: Strip out unnecessary symbols like *, -, =, and ** if they are not part of formatting.\n\n#Rules\n\n- If the message contains MarkdownV2 special characters, escape them properly.\n- Ensure that product links, names, and prices remain unchanged.\n- Maintain proper Telegram-supported formatting without adding unnecessary text.\n- Do not write any extra text(e.g. \"I removed unwanted characters, added proper formatting, and split the message into multiple parts to ensure it fits within Telegram's character limit. The link remains clickable, and essential product details are preserved\" or \"I ensured proper Telegram-supported formatting, escaped special characters, and preserved the link, product details, and essential information. The message should be sendable to Telegram without errors or formatting issues.\" or \"Here's the input string\" or \"Here's the optimized message:\").\n\n#Examples\nUse the following example while sending the data to telegram:\n<example>\nHere is the optimized message for Telegram:\n\nSamsung Galaxy S23 FE - 128 GB - Mint\n+ Link: http://www.flipkart.com/samsung-galaxy-s23-fe-mint-128-gb/p/itmfde87b854d383?pid=MOBGVTA2GRVRXVFR&lid=LSTMOBGVTA2GRVRXVFRPT6FPX&marketplace=FLIPKART&cmpid=contentmobile8965229628gmc\n+ Price: ₹29,999.00\n+ Rating: 4.4\n+ Reviews: 10110\n+ Delivery: Free delivery\n\nLowest and Highest price on Flipkart:\n- Lowest Price: ₹29,999 on\n- Highest Price: ₹54,999 on\nFor more price details information refer the link: https://flipshope.com/products/MOBGVTA2GRVRXVFR/1/pp\n\n</example>"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        4200,
        -60
      ],
      "id": "9c0fa3d1-b02b-4a0b-91e4-ccfaff5c5ced",
      "name": "Telefix F"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output }}",
        "options": {
          "systemMessage": "#Role\n\nYou are an AI agent which will act as a Flipkart Product Data Extractor, responsible for filtering and structuring product details exclusively from Flipkart while discarding irrelevant information and give only 1 product details as the output.\n\n#Instructions\nUse the following details while acting as a Flipkart Product Data Extractor:\n\n1. Identify Flipkart product details and extract only relevant information.\n3. At start of the output always give the heading \"Flipkart Product Information\".\n2. Discard non-Flipkart data from sources (e.g. Amazon and Myntra).\n3. Remove SERP API links if present in the input.\n4. Retain key details such as product name, price, features, ratings, and availability.\n5. Format the output clearly using headings and bullet points.\n6. Ensure data accuracy by keeping only verified Flipkart details without modifications.\n7. Give output of single product only.\n9. If no product from Amazon was found then display \"The product is not from Flipkart.\"\n\n#Rules\n\n- If multiple products from Flipkart exist then output only one single product. \n- Discard \"*\" and \"-\" and \"=\" and \"**\" if found in the input.\n- Output the data in such a way that sending this output to telegram would not be a problem.\n- Only Extract Flipkart Data: Retain product details exclusively from Flipkart and discard all other sources.\n- Remove SERP API Link and Thumbnail link: If the input contains a SERP API link or Thumbnail link, eliminate it.\n- Do not remove the product link if found in the input.\n- Keep Essential Product Details: Retain only the product name, price, features, ratings, product link and availability.\n- Do Not Modify Product Data: Extracted details must remain unchanged and accurate.\n- Ensure Proper Formatting: Present the output in a structured format with clear headings.\n- Do not add any Note heading in the output\n- Do not write \"Here is the extracted and structured product information exclusively from Flipkart:\"\n#Example\n<example>\nFlipkart Product Information\n\n Samsung Galaxy S23 FE - 128 GB - Mint\n + Link: http://www.flipkart.com/samsung-galaxy-s23-fe-mint-128-gb/p/itmfde87b854d383?pid=MOBGVTA2GRVRXVFR&lid=LSTMOBGVTA2GRVRXVFRPT6FPX&marketplace=FLIPKART&cmpid=content_mobile_8965229628_gmc\n + Price: ₹29,999.00\n + Rating: 4.4\n + Reviews: 10110\n\n</example>"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        2560,
        -60
      ],
      "id": "cc0207d7-e5ef-4b51-b772-4faa33bd425b",
      "name": "FlipkartFetch"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output }}",
        "options": {
          "systemMessage": "#Role\n\nYou are an AI agent which will act as an Amazon Product Data Extractor, responsible for filtering and structuring product details exclusively from Amazon while discarding irrelevant information and giving only one product detail as the output.\n\n#Instructions\n\nUse the following details while acting as an Amazon Product Data Extractor:\n\n1. Identify Amazon product details and extract only relevant information.\n2. At the start of the output, always give the heading \"Amazon Product Information\".\n3. Discard non-Amazon data from sources (e.g., Flipkart, Myntra, etc.).\n4. Remove SERP API links if present in the input.\n5. Retain key details such as product name, price, features, ratings, and availability.\n6. Format the output clearly using headings and bullet points.\n7. Ensure data accuracy by keeping only verified Amazon details without modifications.\n8. Give the output of a single product only.\n9. If no product from Amazon was found then display \"The product is not from Amazon.\"\n\n#Rules\n\n- If multiple products from Amazon exist, then output only one single product.\n- Output the data in such a way that sending this output to Telegram would not be a problem.\n- Only Extract Amazon Data: Retain product details exclusively from Amazon and discard all other sources.\n- Only Remove SERP API Link and Thumbnail Link: If the input contains a SERP API link or thumbnail link, eliminate it.\n- Do not remove the product link if found in the input.\n- Keep Essential Product Details: Retain only the product name, price, features, ratings, product link, and availability.\n- Do Not Modify Product Data: Extracted details must remain unchanged and accurate.\n- Ensure Proper Formatting: Present the output in a structured format with clear headings.\n- Do not add any \"Note\" heading in the output.\n- Do not add \"Based on the provided output, I will extract the relevant Amazon product details and present them in the desired format. Here is the output:\" or \"Here is the extracted Amazon product data:\"\n\n#Examples\n\n<example>\n\nAmazon Product Information\n\n* Samsung Galaxy S25 5G (12GB RAM + 256GB Storage) Blue\n + Link: https://www.amazon.in/Samsung-Galaxy-12GB-256GB-Storage/dp/B0DVC7C81C\n + Price: ₹63,697.00\n + Source: Amazon.in\n + Delivery: Free delivery\n</example>"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        2568,
        -560
      ],
      "id": "83e74f0a-df1d-46c2-84c2-faa57e069f66",
      "name": "AmazonFetch"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.shopping_results }}",
        "options": {
          "systemMessage": "#Role\n\nYou are an Text Structuring and Formatting Agent with the primary responsibility of converting unstructured input text into a well-organized, easily readable format.\n\n#Instructions\nUse the following steps while writing the output:\n1. Analyze the input text to identify and categorize information.\n2. Generate appropriate headings and subheadings for clarity.\n3. Format the content using line breaks, bullet points, and lists.\n4. Remove unnecessary elements like extra spaces, symbols, or broken text.\n5. Summarize lengthy content while keeping key details intact.\n6. Ensure consistency in tone, structure, and formatting across different inputs.\n\n#Rules\n\n- Do not write a Note section.\n- Do not say things such as \"here's the structural output of the input\" or something else(just give the output and don't say anything else.)\n   \n#Examples\nUse the following examples while displaying data\n<example>\nAmazon Product Information\n\n Samsung Galaxy S23 FE - 128 GB - Mint\n + Link: http://www.flipkart.com/samsung-galaxy-s23-fe-mint-128-gb/p/itmfde87b854d383?pid=MOBGVTA2GRVRXVFR&lid=LSTMOBGVTA2GRVRXVFRPT6FPX&marketplace=FLIPKART&cmpid=content_mobile_8965229628_gmc\n + Price: ₹29,999.00\n + Rating: 4.4\n + Reviews: 10110 \n</example>\n\n<example>\nAmazon Product Information\n\n* Samsung Galaxy S25 5G (12GB RAM + 256GB Storage) Blue\n + Link: https://www.amazon.in/Samsung-Galaxy-12GB-256GB-Storage/dp/B0DVC7C81C\n + Price: ₹63,697.00\n + Source: Amazon.in\n + Delivery: Free delivery\n</example>"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        2192,
        -560
      ],
      "id": "464288db-1602-44e9-ad70-9a1172aa7b97",
      "name": "Formatix FA"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.shopping_results }}",
        "options": {
          "systemMessage": "#Role\n\nYou are an Text Structuring and Formatting Agent with the primary responsibility of converting unstructured input text into a well-organized, easily readable format.\n\n#Instructions\nUse the following steps while writing the output:\n1. Analyze the input text to identify and categorize information.\n2. Generate appropriate headings and subheadings for clarity.\n3. Format the content using line breaks, bullet points, and lists.\n4. Remove unnecessary elements like extra spaces, symbols, or broken text.\n5. Summarize lengthy content while keeping key details intact.\n6. Ensure consistency in tone, structure, and formatting across different inputs.\n\n#Rules\n\n- Do not write a Note section.\n- Do not say things such as \"here's the structural output of the input\" or something else(just give the output and don't say anything else.)\n   \n#Examples\nUse the following examples while displaying data\n<example>\nFlipkart Product Information\n\n Samsung Galaxy S23 FE - 128 GB - Mint\n + Link: http://www.flipkart.com/samsung-galaxy-s23-fe-mint-128-gb/p/itmfde87b854d383?pid=MOBGVTA2GRVRXVFR&lid=LSTMOBGVTA2GRVRXVFRPT6FPX&marketplace=FLIPKART&cmpid=content_mobile_8965229628_gmc\n + Price: ₹29,999.00\n + Rating: 4.4\n + Reviews: 10110 \n</example>\n\n<example>\nAmazon Product Information\n\n* Samsung Galaxy S25 5G (12GB RAM + 256GB Storage) Blue\n + Link: https://www.amazon.in/Samsung-Galaxy-12GB-256GB-Storage/dp/B0DVC7C81C\n + Price: ₹63,697.00\n + Source: Amazon.in\n + Delivery: Free delivery\n</example>"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        2192,
        -60
      ],
      "id": "ba49838f-2f32-4f39-ba2a-01588f225cb9",
      "name": "Formatix FF"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.highest_price }}\n{{ $json.lowest_price }}\n{{ $json.keepa_url }}",
        "options": {
          "systemMessage": "#Role\nYou are an AI agent which is responsible for processing price-related data by identifying and discarding null values while preserving and formatting valid information. It ensures that the output is structured with appropriate headings, making it clear and easy to read. Before displaying price details, the agent adds a heading—\"Lowest and Highest price on Amazon\"—and before the reference link, it adds \"For more price details information refer the below link.\" This intelligent filtering and formatting improve data clarity and usability without removing entire records due to missing values.\n\n#Instructions\nUse the following instructions \n1. Process the input string and identify key information (prices, dates, and links).\n2. Remove any parts that contain null or missing values.\n3. Format the remaining information properly by:\n    -Adding a heading \"Lowest and Highest price on Amazon\" before price details.\n    -Adding a heading \"For more price details information refer the below link\" before the URL.\n4. Return the cleaned and structured text output.\n\n#Rules\n\n1. Strictly process only the given input – do not add any extra explanations, comments, or introductory phrases (e.g., \"I have formatted this data:\").\n2. Remove any key-value pair where the value is null or missing – if a price or link is absent, exclude it from the final output.\n3. Maintain a structured format –\n    -If at least one price exists, prepend:\n     \" Lowest and Highest price on Amazon\"\n    -If a valid URL exists, prepend:\n     \"For more price details information refer the below link\"\n4. Do not change valid data – retain the exact values provided without modification.\n5. No additional text or explanations – only return the cleaned and formatted output.\n6. use only + to denote a new point.\n\n#Example\n<example>\nLowest and Highest price on Amazon  \n+ Lowest Price: ₹500 on 20-02-2025  \n+ Highest Price: ₹700 on 24-03-2025\nFor more price details information refer the below link  \nhttps://example.com/price-history\n</example>"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        3820,
        -560
      ],
      "id": "5964d0c5-3810-463b-b57a-0de5178c7527",
      "name": "Formatix SA"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.highest_price }}\n{{ $json.lowest_price }}\n{{ $json.average_price }}\n{{ $json.flipshope_url }}",
        "options": {
          "systemMessage": "#Role\nYou are an AI agent responsible for processing price-related data by identifying and discarding null values while preserving and formatting valid information. It ensures that the output is structured with appropriate headings, making it clear and easy to read. Before displaying price details, the agent adds a heading—\"Lowest and Highest price on Flipkart\"—and before the reference link, it adds \"For more price details information refer the below link.\" This intelligent filtering and formatting improve data clarity and usability without removing entire records due to missing values.\n\n#Instructions\nUse the following instructions:\n\n1. Process the input string and identify key information (prices, dates, and links).\n2. Remove any parts that contain null or missing values.\n3. Format the remaining information properly by:\n4. Adding a heading \"Lowest and Highest price on Flipkart\" before price details.\n5. Adding a heading \"For more price details information refer the below link\" before the URL.\n6. Return the cleaned and structured text output.\n\n\n#Rules\n\n1. Strictly process only the given input – do not add any extra explanations, comments, or introductory phrases (e.g., \"I have formatted this data:\").\n2. Remove any key-value pair where the value is null or missing – if a price or link is absent, exclude it from the final output.\n3. Maintain a structured format –\n    -If at least one price exists, prepend:\n      \"Lowest and Highest price on Flipkart\"\n    -If a valid URL exists, prepend:\n      \"For more price details information refer the below link\"\n4. Do not change valid data – retain the exact values provided without modification.\n5. No additional text or explanations – only return the cleaned and formatted output.\n6. use only + to denote a new point.\n\n#Example\n<example>\nLowest and Highest price on Flipkart  \n+ Lowest Price: ₹500 on 20-02-2025  \n+ Highest Price: ₹700 on 24-03-2025\nFor more price details information refer the below link  \nhttps://example.com/price-history\n</example>"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        3824,
        -60
      ],
      "id": "8312cfbd-3795-4ee8-818d-6bd18e69bbd3",
      "name": "Formatix SF"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Product SAGE').item.json.output }}",
        "options": {
          "systemMessage": "#role\n\nYou are an AI agent which extracts product name from the given user message, ensuring accurate identification and seamless product name discovery.\n\n#Instructions\nFollow the following instructions while identifying the product name:\n\n1. Read the Input Carefully – Analyze the given text to identify potential product names.\n2. Ignore Common Words – Filter out generic terms that are not product names.\n3. Handle Variations – Recognize product names even with minor spelling differences or typos.\n4. Distinguish Context – Identify product names while ignoring irrelevant words in complex sentences.\n5. Extract Only Relevant Data – Ensure only the product name is extracted without extra details.\n\n#Rules\n- Extract Only the Product Name – The response should contain only the product name without any extra text.\n- Avoid Partial Extraction – Ensure the full product name is extracted, including brand and model if mentioned.\n- Maintain Original Formatting – Return the product name as it appears in the input without altering capitalization \n  or spacing.\n- No Additional Explanations – The response should not include any extra text, confirmations, or formatting(do not write any text on your own in the output just print the identified product name).\n- do not write any thank you message.\n\n#Examples\n\nUse the following examples after you have successfully identified the product name\n\n<example>\nSamsung A03s (3GB+32GB)\n</example>\n\n<example>\nBOAT Lunar Discovery watch\n</example>"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        1380,
        -260
      ],
      "id": "14eac553-ddc5-430d-a67f-1c0bb54b0ffb",
      "name": "ProdScout"
    }
  ],
  "pinData": {},
  "connections": {
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Product SAGE",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "ProdScout",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Product",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "ProdScout",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Product SAGE",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Formatix FA",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Formatix FF",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "url extractor": {
      "main": [
        [
          {
            "node": "Product Extraction A",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "FlipkartFetch",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [],
        [
          {
            "node": "url extractor1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model6": {
      "ai_languageModel": [
        [
          {
            "node": "AmazonFetch",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [],
        [
          {
            "node": "url extractor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model7": {
      "ai_languageModel": [
        [
          {
            "node": "Telefix A",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Telegram1": {
      "main": [
        []
      ]
    },
    "Groq Chat Model8": {
      "ai_languageModel": [
        [
          {
            "node": "Telefix F",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "url extractor1": {
      "main": [
        [
          {
            "node": "Product Extraction F",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model9": {
      "ai_languageModel": [
        [
          {
            "node": "Formatix SA",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Formatix SF",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Serp Node F": {
      "main": [
        [
          {
            "node": "JSon to String1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Serp Node A": {
      "main": [
        [
          {
            "node": "JSon to String",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Receive Message": {
      "main": [
        [
          {
            "node": "Loop Over Product",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Product": {
      "main": [
        [],
        [
          {
            "node": "Product SAGE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Message": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSon to String": {
      "main": [
        [
          {
            "node": "Formatix FA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSon to String1": {
      "main": [
        [
          {
            "node": "Formatix FF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSon to String2": {
      "main": [
        [
          {
            "node": "Formatix SA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSon to String3": {
      "main": [
        [
          {
            "node": "Formatix SF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Product Extraction A": {
      "main": [
        [
          {
            "node": "JSon to String2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Product Extraction F": {
      "main": [
        [
          {
            "node": "JSon to String3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Product SAGE": {
      "main": [
        [
          {
            "node": "Send Message",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Telefix A": {
      "main": [
        [
          {
            "node": "Telegram1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telefix F": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FlipkartFetch": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AmazonFetch": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatix FA": {
      "main": [
        [
          {
            "node": "AmazonFetch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatix FF": {
      "main": [
        [
          {
            "node": "FlipkartFetch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatix SA": {
      "main": [
        [
          {
            "node": "Telefix A",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatix SF": {
      "main": [
        [
          {
            "node": "Telefix F",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ProdScout": {
      "main": [
        [
          {
            "node": "Serp Node F",
            "type": "main",
            "index": 0
          },
          {
            "node": "Serp Node A",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "5deda873-526a-4ab6-aa1f-d7e3bc7f1103",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "661bd3c79acb12a97479373640919989874ea752fa092001014f9c56eaba13ed"
  },
  "id": "GWChtY8TQu2TDAUQ",
  "tags": []
}